$date
	Sun May 18 18:27:10 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module qwe $end
$var wire 1 ! miss $end
$var wire 2 " index [1:0] $end
$var wire 1 # hit $end
$var wire 8 $ cache_output [7:0] $end
$var reg 1 % clk $end
$var reg 6 & cpu_address [5:0] $end
$var reg 8 ' data_write_cache [7:0] $end
$var reg 1 ( read $end
$var reg 1 ) reset $end
$var reg 1 * write $end
$scope module dut $end
$var wire 1 % clk $end
$var wire 6 + cpu_address [5:0] $end
$var wire 8 , data_write_cache [7:0] $end
$var wire 1 ( read $end
$var wire 1 ) reset $end
$var wire 1 * write $end
$var wire 8 - ram_data [7:0] $end
$var reg 8 . cache_hit_data [7:0] $end
$var reg 8 / cache_output [7:0] $end
$var reg 1 0 count $end
$var reg 1 1 found $end
$var reg 1 # hit $end
$var reg 2 2 index [1:0] $end
$var reg 2 3 mem [1:0] $end
$var reg 1 ! miss $end
$var reg 2 4 nf [1:0] $end
$var reg 8 5 ram_cac_data [7:0] $end
$var reg 8 6 ram_data_in [7:0] $end
$var reg 1 7 ram_write_enable $end
$var integer 32 8 i [31:0] $end
$var integer 32 9 j [31:0] $end
$scope module ram_inst $end
$var wire 1 % clk $end
$var wire 6 : cpu_address [5:0] $end
$var wire 8 ; data_in [7:0] $end
$var wire 8 < data_out [7:0] $end
$var wire 1 7 write_enable $end
$upscope $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 = \cache_data[0] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 > \cache_data[1] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 ? \cache_data[2] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 @ \cache_data[3] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 A \cache_data[4] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 B \cache_data[5] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 C \cache_data[6] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 D \cache_data[7] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 E \cache_data[8] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 F \cache_data[9] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 G \cache_data[10] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 H \cache_data[11] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 I \cache_data[12] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 J \cache_data[13] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 K \cache_data[14] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 8 L \cache_data[15] [7:0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 1 M \valid[0] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 1 N \valid[4] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 1 O \valid[8] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 1 P \valid[12] $end
$upscope $end
$upscope $end
$scope module qwe $end
$scope module dut $end
$var reg 1 Q \valid[1] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0Q
0P
0O
0N
0M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
b100 9
b100 8
x7
bx 6
bx 5
b0 4
bx 3
bx 2
x1
x0
bx /
bx .
bx -
bx ,
bx +
x*
1)
x(
bx '
bx &
0%
bx $
0#
bx "
0!
$end
#5
bx L
bx K
bx J
0P
bx I
bx H
bx G
bx F
0O
bx E
bx D
bx C
bx B
0N
bx A
bx @
bx ?
0Q
bx >
0M
bx =
b100 9
b100 8
1%
#10
0%
#15
b1 $
b1 /
b1 5
b1 =
1M
1!
b100 8
07
b0 3
10
01
b0 "
b0 2
1%
b1 -
b1 <
b0 &
b0 +
b0 :
0*
1(
0)
#20
0%
#25
b10 $
b10 /
b10 5
b10 >
1Q
b100 8
10
b1 "
b1 2
1%
b10 -
b10 <
b1 &
b1 +
b1 :
#30
0%
#35
b1 $
b1 /
11
bx 5
b1 .
0!
1#
b100 8
00
b0 "
b0 2
1%
b1 -
b1 <
b0 &
b0 +
b0 :
#40
0%
#45
b11111111 -
b11111111 <
b11111111 $
b11111111 /
b11111111 .
b11111111 =
b100 8
17
b11111111 6
b11111111 ;
11
1%
b11111111 '
b11111111 ,
1*
0(
#50
0%
#55
b101 $
b101 /
b101 5
b101 A
1N
b1 3
10
0#
1!
b100 8
07
01
1%
b101 -
b101 <
b100 &
b100 +
b100 :
0*
1(
#60
0%
#65
b1001 $
b1001 /
b1001 5
b1001 E
1O
b100 8
b10 3
10
1%
b1001 -
b1001 <
b1000 &
b1000 +
b1000 :
#70
0%
#75
b1101 $
b1101 /
b1101 5
b1101 I
1P
b100 8
b11 3
10
1%
b1101 -
b1101 <
b1100 &
b1100 +
b1100 :
#80
0%
#85
b100101 $
b100101 /
b100101 5
b100101 =
b1 4
b100 8
b0 3
10
1%
b100101 -
b100101 <
b100100 &
b100100 +
b100100 :
#90
0%
#95
b101001 $
b101001 /
b101001 5
b101001 A
b10 4
b1 3
b100 8
10
1%
b101001 -
b101001 <
b101000 &
b101000 +
b101000 :
#100
0%
#105
11
bx 5
b101001 .
0!
1#
b100 8
b0 3
00
1%
#110
0%
#115
b100 8
11
1%
#120
0%
#125
b100 8
11
1%
#130
0%
#135
b100 8
11
1%
#140
0%
#145
b100 8
11
1%
#150
0%
#155
b100 8
11
1%
#160
0%
#165
b100 8
11
1%
#170
0%
#175
b100 8
11
1%
#180
0%
#185
b100 8
11
1%
#190
0%
#195
b100 8
11
1%
#200
0%
#205
b100 8
11
1%
#210
0%
#215
b100 8
11
1%
